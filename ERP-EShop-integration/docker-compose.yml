services:
    wait-for-it:
        image: hanabosocom/wait-for-it:master

    worker:
        image: worker:tag
        build: worker/docker
        user: ${DEV_UID}:${DEV_GID}
        working_dir: /var/www
        volumes:
            - ./worker/:/var/www:cached
        environment:
            # Envs for tests are load from nodejs-sdk/.jest/testEnvs.js
            JEST_DOCKER: 1
            APP_ENV: debug
            APP_PORT: 8000
            CRYPT_SECRET: ${CRYPT_SECRET}
            BACKEND_URL: ${BACKEND_URL}
            STARTING_POINT_DSN: ${STARTING_POINT_DSN}
            WORKER_API_HOST: ${WORKER_API_HOST}
            ORCHESTY_API_KEY: ${ORCHESTY_API_KEY}
            REDIS_DSN: redis://redis
            MONGODB_DSN: ${MONGO_DSN}
        command: sh -c 'pnpm i && pnpm run start'
        mem_limit: 512MB
        depends_on:
            - fluentd
            - mongo

    multi-counter:
        image: orchesty/counter:${VERSION}
        environment:
            RABBITMQ_DSN: ${RABBITMQ_DSN}
            MONGODB_DSN: ${MONGO_DSN}
            METRICS_DSN: ${METRICS_DSN}
            STARTING_POINT_DSN: ${STARTING_POINT_DSN}
            UDP_LOGGER_URL: ${UDP_LOGGER_DSN}
        mem_limit: 64MB
        depends_on:
            - mongo
            - rabbitmq

    starting-point:
        image: orchesty/starting-point:${VERSION}
        environment:
            MONGO_DSN: ${MONGO_DSN}
            METRICS_DSN: ${METRICS_DSN}
            RABBITMQ_DSN: ${RABBITMQ_DSN}
            RABBIT_DELIVERY_MODE: 2
        ports:
            - ${DEV_IP}:82:8080
        mem_limit: 64MB
        depends_on:
            - fluentd
            - mongo
            - rabbitmq

    topology-api:
        image: orchesty/topology-api:${VERSION}
        environment:
            DEPLOYMENT_PREFIX: ${MAIN_DB}
            GENERATOR_NETWORK: ${NETWORK_NAME}
            PLATFORM: ${PLATFORM}
            GENERATOR_PATH: /srv/topology
            PROJECT_SOURCE_PATH: ${PROJECT_SOURCE_PATH}/topology
            MONGO_DSN: ${MONGO_DSN}
        volumes:
            - ${DOCKER_SOCKET_PATH}:/var/run/docker.sock
            - ./topology:/srv/topology
        mem_limit: 64MB
        depends_on:
            - mongo

    detector:
        image: orchesty/detector:${VERSION}
        environment:
            MONGO_DSN: ${MONGO_DSN}
            METRICS_DSN: ${METRICS_DSN}
            RABBITMQ_DSN: ${RABBITMQ_DSN}
            PLATFORM: ${PLATFORM}
            DOCKER_NETWORK: ${NETWORK_NAME}
        mem_limit: 32MB
        depends_on:
            - mongo
            - rabbitmq

    cron-api:
        image: orchesty/cron:${VERSION}
        environment:
            MONGO_DSN: ${MONGO_DSN}
            MONGO_COLLECTION: cron
            STARTING_POINT_DSN: ${STARTING_POINT_DSN}
        mem_limit: 32MB
        depends_on:
            - mongo

    limiter:
        image: orchesty/limiter:${VERSION}
        environment:
            LIMITER_ADDR: 0.0.0.0:3333
            RABBITMQ_DSN: ${RABBITMQ_DSN}
            MONGO_DSN: ${MONGO_DSN}
            UDP_LOGGER_DSN: ${UDP_LOGGER_DSN}
        mem_limit: 32MB
        depends_on:
            - fluentd
            - mongo
            - rabbitmq

    worker-api:
        image: orchesty/worker-api:${VERSION}
        environment:
            MONGODB_DSN: ${MONGO_DSN}
            FLUENTD_DSN: ${TCP_LOGGER_DSN}
        mem_limit: 64MB
        depends_on:
            - fluentd
            - mongo

    frontend:
        image: orchesty/frontend:${VERSION}
        environment:
            BACKEND_URL: ${BACKEND_URL}
            FRONTEND_URL: '/'
            STARTINGPOINT_URL: ${STARTING_POINT_URL}
        ports:
            - ${DEV_IP}:85:80
        mem_limit: 32MB

    backend:
        image: orchesty/backend:${VERSION}
        ports:
            - ${DEV_IP}:8080:80
        volumes:
            - ./worker/src/topology:/var/www/topology
        environment:
            BACKEND_URL: ${BACKEND_URL}/
            FRONTEND_URL: ${FRONTEND_URL}/
            RABBITMQ_DSN: ${RABBITMQ_DSN}
            MONGODB_DSN: ${MONGO_DSN}
            MONGODB_DB: ${MAIN_DB}
            METRICS_DSN: ${METRICS_DSN}
            METRICS_DB: metrics
            CRON_DSN: cron-api:8080
            STARTING_POINT_URL: ${STARTING_POINT_DSN}
            TOPOLOGY_API_DSN: topology-api:8080
            DOCKER_PF_BRIDGE_IMAGE: orchesty/bridge:${VERSION}
            JWT_KEY: ${JWT_KEY}
            INSTALLER_DIRS: '["/var/www/topology"]'
        mem_limit: 64MB
        depends_on:
            - fluentd
            - mongo
            - rabbitmq

    fluentd:
        image: orchesty/fluentd:${VERSION}
        environment:
            - MONGO_DSN=${MONGO_DSN}
            - MONGO_COLLECTION=Logs
        mem_limit: 128MB

    mongo:
        image: mongo
        ports:
            - ${DEV_IP}:27017:27017
        volumes:
            - mongodb:/data/db
        mem_limit: 256MB

    rabbitmq:
        image: rabbitmq:3-management-alpine
        ports:
            - ${DEV_IP}:15672:15672
            - ${DEV_IP}:15692:15692
        volumes:
            - rabbitmq:/var/lib/rabbitmq
        mem_limit: 512MB


    wordpress:
        image: wordpress:php8.3
        ports:
            - ${DEV_IP}:80:80
        volumes:
            - ./WooCommerce/uploads.ini:/usr/local/etc/php/conf.d/uploads.ini:cached
            - ./WooCommerce/apache2.conf:/etc/apache2/apache2.conf:cached
        environment:
            WORDPRESS_DB_HOST: db
            WORDPRESS_DB_USER: wpuser
            WORDPRESS_DB_PASSWORD: wpuser
            WORDPRESS_DB_NAME: wordpress
            WORDPRESS_CONFIG_EXTRA: |
                define('WP_ENVIRONMENT_TYPE', 'local');
                define('WP_DEBUG', false);

    db:
        image: mysql:8.2
        command: "mysqld --innodb_adaptive_hash_index=false --innodb_flush_method=nosync --innodb_file_per_table=false"
        environment:
            MYSQL_DATABASE: wordpress
            MYSQL_USER: wpuser
            MYSQL_PASSWORD: wpuser
            MYSQL_ROOT_PASSWORD: root
        ports:
            - ${DEV_IP}:3306:3306
        volumes:
            - mysql:/var/lib/mysql

    prometheus:
      image: prom/prometheus
      volumes:
          - ./Prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
      ports:
          - ${DEV_IP}:9090:9090

    grafana:
        image: grafana/grafana
        volumes:
            - ./Grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
            - ./Grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
            - ./Grafana/dashboards:/var/lib/grafana/dashboards
        environment:
            GF_SECURITY_ADMIN_USER: root
            GF_SECURITY_ADMIN_PASSWORD: root
            GF_SECURITY_DISABLE_INITIAL_ADMIN_PASSWORD_CHANGE: true
        ports:
            - ${DEV_IP}:3000:3000

    adminer:
        image: adminer
        ports:
            - ${DEV_IP}:8888:8080

    redis:
        image: redis:alpine
        ports:
            - ${DEV_IP}:6379:6379

volumes:
    mysql:
    mongodb:
    rabbitmq:

networks:
    default:
        name: ${NETWORK_NAME}
